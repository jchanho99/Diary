name: Pull Request Discord Notification

on:
  pull_request:
    types: [opened, reopened] # PR이 열리거나 다시 열릴 때 실행

jobs:
  notify-discord:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository # git log를 위해 레포지토리 체크아웃 추가
        uses: actions/checkout@v4
        with:
          # fetch-depth: 0 은 모든 히스토리를 가져와 git log 비교를 가능하게 함
          # 하지만 큰 레포지토리에서는 시간이 오래 걸릴 수 있으니 주의.
          # 특정 브랜치만 fetch하는 것이 더 효율적일 수 있습니다.
          # 여기서는 기본 checkout만으로 충분히 필요한 커밋 정보 가져올 수 있도록 설정
          fetch-depth: 0 # 모든 히스토리를 가져옴

      - name: Get Pull Request details and commits
        id: pr_details
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          PR_BASE_REF="${{ github.event.pull_request.base.ref }}" # 대상 브랜치
          PR_HEAD_REF="${{ github.event.pull_request.head.ref }}" # 소스 브랜치

          # Git log 명령어를 사용하여 base 브랜치와 head 브랜치 사이의 커밋을 가져옵니다.
          # --no-merges: 병합 커밋 제외
          # --pretty=format:"`%h` %s" : 짧은 해시와 제목만 표시
          # HEAD는 actions/checkout@v4로 체크아웃된 PR_HEAD_REF를 가리키므로,
          # git log를 현재 HEAD와 PR_BASE_REF 간에 비교합니다.
          COMMITS=$(git log --no-merges --pretty=format:"`%h` %s" "${PR_BASE_REF}"..HEAD)

          if [ -z "$COMMITS" ]; then
            COMMITS_LIST="*커밋 정보 없음*"
          else
            # 각 줄 앞에 '* ' 추가
            COMMITS_LIST=$(echo "$COMMITS" | sed 's/^/* /')
          fi

          # Discord 메시지 본문 구성
          DISCORD_MESSAGE="**새로운 PR이 생성되었습니다!** :rocket:\n\n"
          DISCORD_MESSAGE+="**제목:** ${PR_TITLE}\n"
          DISCORD_MESSAGE+="**PR 번호:** #${PR_NUMBER}\n"
          DISCORD_MESSAGE+="**작성자:** ${PR_AUTHOR}\n"
          DISCORD_MESSAGE+="**링크:** ${PR_URL}\n\n"
          DISCORD_MESSAGE+="**포함된 커밋:**\n${COMMITS_LIST}"

          # 다음 스텝에서 사용할 수 있도록 환경 변수에 저장
          # `echo "VAR_NAME=$(value)" >> $GITHUB_ENV` 형식 사용
          # 메시지 내용에 큰따옴표가 포함될 경우를 대비해 이스케이프 처리
          echo "DISCORD_MESSAGE=$(echo "$DISCORD_MESSAGE" | sed 's/"/\\"/g')" >> $GITHUB_ENV

      - name: Send Discord Notification
        uses: actions/github-script@v7
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
          DISCORD_MESSAGE: ${{ env.DISCORD_MESSAGE }} # 이전 스텝에서 설정된 환경 변수 사용
        with:
          script: |
            const discordMessage = process.env.DISCORD_MESSAGE;
            const webhookUrl = process.env.DISCORD_WEBHOOK;

            const payload = {
              content: discordMessage,
              username: "GitHub PR Notifier",
              avatar_url: "https://avatars.githubusercontent.com/u/9919?s=200&v=4"
            };

            const response = await fetch(webhookUrl, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(payload),
            });

            if (!response.ok) {
              const errorText = await response.text();
              throw new Error(`Failed to send Discord notification: ${response.status} ${errorText}`);
            }
            console.log('Discord notification sent successfully!');
