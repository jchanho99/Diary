# name: Pull Request Discord Notification

# on:
#   pull_request:
#     types: [opened, reopened]

# jobs:
#   notify-discord:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
#         with:
#           ref: ${{ github.event.pull_request.head.ref }}
#           fetch-depth: 1

#       - name: Fetch base branch history
#         run: |
#           git fetch origin ${{ github.event.pull_request.base.ref }}

#       - name: Get Pull Request details and commits
#         id: pr_details
#         run: |
#           PR_NUMBER=${{ github.event.pull_request.number }}
#           PR_TITLE="${{ github.event.pull_request.title }}"
#           PR_URL="${{ github.event.pull_request.html_url }}"
#           PR_AUTHOR="${{ github.event.pull_request.user.login }}"
#           PR_BASE_REF="${{ github.event.pull_request.base.ref }}"
#           PR_HEAD_REF="${{ github.event.pull_request.head.ref }}"

#           # --- MODIFIED PART START ---
#           # Removed backticks from the `sed` commands here
#           COMMITS=$(git log --no-merges --pretty=format:"%h %s" --max-count=7 origin/"${PR_BASE_REF}"..HEAD)

#           COMMITS_LIST=""
#           if [ -z "$COMMITS" ]; then
#             COMMITS_LIST="*커밋 정보 없음*"
#           else
#             # Ensure each line starts with `* ` for Markdown list formatting in Discord
#             COMMITS_LIST=$(echo "$COMMITS" | sed 's/^/* /')
#           fi
#           # --- MODIFIED PART END ---

#           # Store variables in GITHUB_ENV for the next step
#           echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
#           echo "PR_TITLE=$(echo "$PR_TITLE" | sed 's/"/\\"/g')" >> $GITHUB_ENV
#           echo "PR_URL=$PR_URL" >> $GITHUB_ENV
#           echo "PR_AUTHOR=$PR_AUTHOR" >> $GITHUB_ENV
#           echo "COMMITS_LIST=$(echo "$COMMITS_LIST" | sed 's/"/\\"/g')" >> $GITHUB_ENV # Escape quotes in the content


#       - name: Send Discord Notification
#         uses: actions/github-script@v7
#         env:
#           DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
#           PR_NUMBER: ${{ env.PR_NUMBER }}
#           PR_TITLE: ${{ env.PR_TITLE }}
#           PR_URL: ${{ env.PR_URL }}
#           PR_AUTHOR: ${{ env.PR_AUTHOR }}
#           COMMITS_LIST: ${{ env.COMMITS_LIST }}
#         with:
#           script: |
#             const webhookUrl = process.env.DISCORD_WEBHOOK;
#             const prNumber = process.env.PR_NUMBER;
#             const prTitle = process.env.PR_TITLE;
#             const prUrl = process.env.PR_URL;
#             const prAuthor = process.env.PR_AUTHOR;
#             let commitsList = process.env.COMMITS_LIST; // Use 'let' to allow modification

#             // --- MODIFIED PART START ---
#             // Add backticks here in JavaScript if commitsList is not empty
#             if (commitsList && commitsList !== '*커밋 정보 없음*') {
#               // Split by newline, add backticks to each item, then join
#               commitsList = commitsList.split('\n').map(line => `${line}\``).join('\n');
#             }
#             // --- MODIFIED PART END ---

#             const payload = {
#               username: "GitHub PR Notifier",
#               avatar_url: "https://avatars.githubusercontent.com/u/9919?s=200&v=4",
#               embeds: [
#                 {
#                   title: `✨ 새로운 PR: #${prNumber} - ${prTitle}`,
#                   url: prUrl,
#                   color: 5814783,
#                   author: {
#                     name: `작성자: ${prAuthor}`,
#                     url: `https://github.com/${prAuthor}`,
#                     icon_url: `https://github.com/${prAuthor}.png?size=32`
#                   },
#                   fields: [
#                     {
#                       name: "PR 구경하러 가기",
#                       value: `[PR #${prNumber}: ${prTitle}](${prUrl})`,
#                       inline: true
#                     },
#                     {
#                       name: "커밋 내용 (최근 7개)",
#                       value: commitsList || "*커밋 정보 없음*",
#                       inline: true
#                     }
#                   ],
#                   footer: {
#                     text: "GitHub Actions",
#                     icon_url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
#                   },
#                   timestamp: new Date().toISOString()
#                 }
#               ]
#             };

#             const response = await fetch(webhookUrl, {
#               method: 'POST',
#               headers: {
#                 'Content-Type': 'application/json',
#               },
#               body: JSON.stringify(payload),
#             });

#             if (!response.ok) {
#               const errorText = await response.text();
#               throw new Error(`Failed to send Discord notification: ${response.status} ${errorText}`);
#             }
#             console.log('Discord notification sent successfully!');


name: Pull Request Discord Notification

on:
  pull_request:
    types: [opened, reopened] # PR이 열리거나 다시 열릴 때 실행

jobs:
  notify-discord:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 1 # 현재 브랜치의 최신 커밋만 가져옵니다.

      - name: Fetch base branch history
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}

      - name: Get Pull Request details and commits
        id: pr_details
        run: |
          # 필요한 정보들을 지역 변수로 정의
          PR_NUMBER=${{ github.event.pull_request.number }}
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          PR_BASE_REF="${{ github.event.pull_request.base.ref }}"
          REPOSITORY_URL="${{ github.event.repository.html_url }}"

          # --max-count=7: 최대 7개의 커밋만 가져옵니다.
          # 형식: SHA@@@메시지
          COMMITS=$(git log --no-merges --pretty=format:"%h@@@%s" --max-count=7 origin/"${PR_BASE_REF}"..HEAD)

          # 다음 스텝에서 사용할 정보만 GITHUB_ENV에 저장
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "PR_TITLE=$(echo "$PR_TITLE" | sed 's/"/\\"/g')" >> $GITHUB_ENV
          echo "PR_URL=$PR_URL" >> $GITHUB_ENV
          echo "PR_AUTHOR=$PR_AUTHOR" >> $GITHUB_ENV
          echo "COMMITS_RAW_LIST=$(echo "$COMMITS" | sed 's/"/\\"/g')" >> $GITHUB_ENV # 원본 커밋 데이터 전달
          echo "REPOSITORY_URL=$REPOSITORY_URL" >> $GITHUB_ENV


      - name: Send Discord Notification
        uses: actions/github-script@v7
        env:
          # 필요한 환경 변수만 명시적으로 전달
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
          # 이전 스텝에서 GITHUB_ENV에 설정된 변수들은 자동으로 `process.env`로 접근 가능
        with:
          script: |
            const webhookUrl = process.env.DISCORD_WEBHOOK;
            // GITHUB_ENV에서 자동으로 넘어온 변수들을 직접 사용
            const prNumber = process.env.PR_NUMBER;
            const prTitle = process.env.PR_TITLE;
            const prUrl = process.env.PR_URL;
            const prAuthor = process.env.PR_AUTHOR;
            const commitsRawList = process.env.COMMITS_RAW_LIST;
            const repositoryUrl = process.env.REPOSITORY_URL;

            let formattedCommitsList = "*커밋 정보 없음*";
            if (commitsRawList && commitsRawList !== '*커밋 정보 없음*') {
              const commitsArray = commitsRawList.split('\n').filter(line => line.trim() !== '');
              formattedCommitsList = commitsArray.map(commitLine => {
                const parts = commitLine.split('@@@');
                const sha = parts[0];
                const message = parts.slice(1).join('@@@').trim();
                const commitUrl = `${repositoryUrl}/commit/${sha}`;
                return `* [\`${sha}\`](${commitUrl}) ${message}`;
              }).join('\n');
            }

            const payload = {
              username: "GitHub PR Notifier",
              avatar_url: "https://avatars.githubusercontent.com/u/9919?s=200&v=4",
              embeds: [
                {
                  title: `✨ 새로운 PR: #${prNumber} - ${prTitle}`,
                  url: prUrl,
                  color: 5814783,
                  author: {
                    name: `작성자: ${prAuthor}`,
                    url: `https://github.com/${prAuthor}`,
                    icon_url: `https://github.com/${prAuthor}.png?size=32`
                  },
                  fields: [
                    {
                      name: "PR 구경하러 가기",
                      value: `[PR #${prNumber}: ${prTitle}](${prUrl})`,
                      inline: true
                    },
                    {
                      name: "커밋 내용 (최근 7개)",
                      value: formattedCommitsList,
                      inline: true
                    }
                  ],
                  footer: {
                    text: "GitHub Actions",
                    icon_url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
                  },
                  timestamp: new Date().toISOString()
                }
              ]
            };

            const response = await fetch(webhookUrl, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(payload),
            });

            if (!response.ok) {
              const errorText = await response.text();
              throw new Error(`Failed to send Discord notification: ${response.status} ${errorText}`);
            }
            console.log('Discord notification sent successfully!');
