name: PR Discord Notification

on:
  pull_request:
    types: [opened, reopened] # PR이 열리거나 다시 열릴 때 실행

jobs:
  notify-discord:
    runs-on: ubuntu-latest
    steps:
      # Git Checkout 및 Fetch 스텝은 더 이상 필요 없습니다.
      # GitHub API를 직접 호출하여 커밋 정보를 가져옵니다.

      - name: Get Pull Request details and commits via GitHub API
        id: pr_details_api
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            const repoOwner = context.repo.owner;
            const repoName = context.repo.repo;

            // GitHub API를 사용하여 PR의 커밋 목록을 가져옵니다.
            // max 7개 커밋을 가져오도록 `per_page`를 설정합니다.
            const { data: commits } = await github.rest.pulls.listCommits({
              owner: repoOwner,
              repo: repoName,
              pull_number: prNumber,
              per_page: 7, // 최대 7개 커밋만 가져오도록 설정
            });

            let formattedCommitsList = "*커밋 정보 없음*";
            if (commits && commits.length > 0) {
              formattedCommitsList = commits.map(commit => {
                const sha = commit.sha.substring(0, 7); // 짧은 SHA
                const message = commit.commit.message.split('\n')[0].trim(); // 첫 줄만 가져오기
                const commitUrl = commit.html_url; // 커밋 HTML URL
                return `* [\`${sha}\`](${commitUrl}) ${message}`;
              }).join('\n');
            }

            // 필요한 정보들을 GITHUB_ENV에 저장합니다.
            // github.event.pull_request 객체에서 직접 가져옵니다.
            console.log(`::set-env name=PR_NUMBER::${prNumber}`);
            console.log(`::set-env name=PR_TITLE::${JSON.stringify(context.payload.pull_request.title)}`);
            console.log(`::set-env name=PR_URL::${context.payload.pull_request.html_url}`);
            console.log(`::set-env name=PR_AUTHOR::${context.payload.pull_request.user.login}`);
            console.log(`::set-env name=COMMITS_FORMATTED_LIST::${JSON.stringify(formattedCommitsList)}`); // 포맷팅된 커밋 목록
            console.log(`::set-env name=REPOSITORY_NAME::${JSON.stringify(repoName)}`);
            console.log(`::set-env name=REPOSITORY_URL::${context.payload.repository.html_url}`);


      - name: Send Discord Notification
        uses: actions/github-script@v7
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          script: |
            const webhookUrl = process.env.DISCORD_WEBHOOK;
            // GITHUB_ENV에서 설정된 변수들을 직접 사용
            const prNumber = process.env.PR_NUMBER;
            const prTitle = process.env.PR_TITLE;
            const prUrl = process.env.PR_URL;
            const prAuthor = process.env.PR_AUTHOR;
            const commitsList = process.env.COMMITS_FORMATTED_LIST; // 이미 포맷팅된 리스트 사용
            const repositoryName = process.env.REPOSITORY_NAME;
            const repositoryUrl = process.env.REPOSITORY_URL;

            const payload = {
              username: "GitHub PR Notifier",
              avatar_url: "https://avatars.githubusercontent.com/u/9919?s=200&v=4",
              embeds: [
                {
                  title: `PR 정보: #${prNumber} - ${prTitle}`,
                  url: prUrl,
                  color: 5814783,
                  author: {
                    name: `작성자: ${prAuthor}`,
                    url: `https://github.com/${prAuthor}`,
                    icon_url: `https://github.com/${prAuthor}.png?size=32`
                  },
                  fields: [
                    {
                      name: "PR 구경하러 가기",
                      value: `[PR #${prNumber}: ${prTitle}](${prUrl})`,
                      inline: true
                    },
                    {
                      name: "커밋 내용 (최근 7개)",
                      value: commitsList, // 이미 포맷팅된 리스트
                      inline: false // 커밋 목록은 여러 줄이므로 inline: false가 더 적합합니다.
                    }
                  ],
                  footer: {
                    text: "GitHub Actions",
                    icon_url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
                  },
                  timestamp: new Date().toISOString()
                }
              ]
            };

            const response = await fetch(webhookUrl, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(payload),
            });

            if (!response.ok) {
              const errorText = await response.text();
              throw new Error(`Failed to send Discord notification: ${response.status} ${errorText}`);
            }
            console.log('Discord notification sent successfully!');
