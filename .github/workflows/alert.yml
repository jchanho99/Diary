name: Pull Request Discord Notification

on:
  pull_request:
    types: [opened, reopened]

jobs:
  notify-discord:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 1

      - name: Fetch base branch history
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}

      - name: Get Pull Request details and commits
        id: pr_details
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          PR_BASE_REF="${{ github.event.pull_request.base.ref }}"
          PR_HEAD_REF="${{ github.event.pull_request.head.ref }}"
          REPOSITORY_NAME="${{ github.event.repository.name }}"
          REPOSITORY_URL="${{ github.event.repository.html_url }}"

          # --- MODIFIED PART START ---
          # Removed backticks from the `sed` commands here
          COMMITS=$(git log --no-merges --pretty=format:"%h %s" --max-count=7 origin/"${PR_BASE_REF}"..HEAD)

          COMMITS_LIST=""
          if [ -z "$COMMITS" ]; then
            COMMITS_LIST="*커밋 정보 없음*"
          else
            # Ensure each line starts with `* ` for Markdown list formatting in Discord
            COMMITS_LIST=$(echo "$COMMITS" | sed 's/^/* /')
          fi
          # --- MODIFIED PART END ---

          # Store variables in GITHUB_ENV for the next step
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "PR_TITLE=$(echo "$PR_TITLE" | sed 's/"/\\"/g')" >> $GITHUB_ENV
          echo "PR_URL=$PR_URL" >> $GITHUB_ENV
          echo "PR_AUTHOR=$PR_AUTHOR" >> $GITHUB_ENV
          echo "COMMITS_LIST=$(echo "$COMMITS_LIST" | sed 's/"/\\"/g')" >> $GITHUB_ENV # Escape quotes in the content
          echo "REPOSITORY_NAME=$(echo "$REPOSITORY_NAME" | sed 's/"/\\"/g')" >> $GITHUB_ENV
          echo "REPOSITORY_URL=$REPOSITORY_URL" >> $GITHUB_ENV


      - name: Send Discord Notification
        uses: actions/github-script@v7
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
          PR_NUMBER: ${{ env.PR_NUMBER }}
          PR_TITLE: ${{ env.PR_TITLE }}
          PR_URL: ${{ env.PR_URL }}
          PR_AUTHOR: ${{ env.PR_AUTHOR }}
          COMMITS_LIST: ${{ env.COMMITS_LIST }}
          REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}
          REPOSITORY_URL: ${{ env.REPOSITORY_URL }}
        with:
          script: |
            const webhookUrl = process.env.DISCORD_WEBHOOK;
            const prNumber = process.env.PR_NUMBER;
            const prTitle = process.env.PR_TITLE;
            const prUrl = process.env.PR_URL;
            const prAuthor = process.env.PR_AUTHOR;
            let commitsList = process.env.COMMITS_LIST; // Use 'let' to allow modification
            const repositoryName = process.env.REPOSITORY_NAME;
            const repositoryUrl = process.env.REPOSITORY_URL;

            // --- MODIFIED PART START ---
            // Add backticks here in JavaScript if commitsList is not empty
            if (commitsList && commitsList !== '*커밋 정보 없음*') {
              // Split by newline, add backticks to each item, then join
              commitsList = commitsList.split('\n').map(line => `${line}\``).join('\n');
            }
            // --- MODIFIED PART END ---

            const payload = {
              username: "GitHub PR Notifier",
              avatar_url: "https://avatars.githubusercontent.com/u/9919?s=200&v=4",
              embeds: [
                {
                  title: `✨ 새로운 PR: #${prNumber} - ${prTitle}`,
                  url: prUrl,
                  description: `**${repositoryName}** 저장소에 PR이 생성되었습니다.`,
                  color: 5814783,
                  author: {
                    name: `작성자: ${prAuthor}`,
                    url: `https://github.com/${prAuthor}`,
                    icon_url: `https://github.com/${prAuthor}.png?size=32`
                  },
                  fields: [
                    {
                      name: "🔗 PR 링크",
                      value: `[PR #${prNumber}: ${prTitle}](${prUrl})`,
                      inline: false
                    },
                    {
                      name: "📝 포함된 커밋 (최근 7개)",
                      value: commitsList || "*커밋 정보 없음*",
                      inline: false
                    },
                    {
                      name: "📦 저장소",
                      value: `[${repositoryName}](${repositoryUrl})`,
                      inline: true
                    },
                    {
                      name: "👤 작성자",
                      value: `[${prAuthor}](https://github.com/${prAuthor})`,
                      inline: true
                    }
                  ],
                  footer: {
                    text: "GitHub Actions",
                    icon_url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
                  },
                  timestamp: new Date().toISOString()
                }
              ]
            };

            const response = await fetch(webhookUrl, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(payload),
            });

            if (!response.ok) {
              const errorText = await response.text();
              throw new Error(`Failed to send Discord notification: ${response.status} ${errorText}`);
            }
            console.log('Discord notification sent successfully!');
